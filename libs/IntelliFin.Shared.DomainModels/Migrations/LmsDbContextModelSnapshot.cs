// <auto-generated />
using System;
using IntelliFin.Shared.DomainModels.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IntelliFin.Shared.DomainModels.Migrations
{
    [DbContext(typeof(LmsDbContext))]
    partial class LmsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.ApplicationField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HelpText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("LoanProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OptionsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ValidationPattern")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("LoanProductId");

                    b.ToTable("ApplicationFields", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.AuditEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Actor")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("OccurredAtUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EntityType", "EntityId", "OccurredAtUtc");

                    b.ToTable("AuditEvents", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("NationalId")
                        .IsUnique();

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.CreditAssessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssessedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("CreditScore")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("DebtToIncomeRatio")
                        .HasColumnType("decimal(5,4)");

                    b.Property<bool>("HasCreditBureauData")
                        .HasColumnType("bit");

                    b.Property<Guid>("LoanApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PaymentCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RiskGrade")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ScoreExplanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssessedAt");

                    b.HasIndex("LoanApplicationId");

                    b.HasIndex("RiskGrade");

                    b.ToTable("CreditAssessments", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.CreditFactor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreditAssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Impact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("Id");

                    b.HasIndex("CreditAssessmentId");

                    b.ToTable("CreditFactors", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.DocumentVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataMismatches")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentImagePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasDataMismatches")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManuallyEnteredData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OcrConfidenceScore")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("OcrExtractedData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OcrProvider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VerificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationDecisionReason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("VerificationNotes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("IsVerified");

                    b.HasIndex("VerificationDate");

                    b.HasIndex("DocumentType", "DocumentNumber");

                    b.ToTable("DocumentVerifications", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsContraAccount")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ParentAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountCode")
                        .IsUnique();

                    b.HasIndex("Category");

                    b.HasIndex("ParentAccountId");

                    b.ToTable("GLAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa1"),
                            AccountCode = "1000",
                            AccountType = "",
                            Category = "Asset",
                            CreatedAt = new DateTime(2025, 9, 6, 10, 23, 27, 700, DateTimeKind.Utc).AddTicks(8734),
                            CurrentBalance = 0m,
                            IsActive = true,
                            IsContraAccount = false,
                            LastModified = new DateTime(2025, 9, 6, 10, 23, 27, 700, DateTimeKind.Utc).AddTicks(8740),
                            Level = 0,
                            Name = "Cash and Bank"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa2"),
                            AccountCode = "1100",
                            AccountType = "",
                            Category = "Asset",
                            CreatedAt = new DateTime(2025, 9, 6, 10, 23, 27, 701, DateTimeKind.Utc).AddTicks(1795),
                            CurrentBalance = 0m,
                            IsActive = true,
                            IsContraAccount = false,
                            LastModified = new DateTime(2025, 9, 6, 10, 23, 27, 701, DateTimeKind.Utc).AddTicks(1799),
                            Level = 0,
                            Name = "Loans Receivable"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3"),
                            AccountCode = "2000",
                            AccountType = "",
                            Category = "Liability",
                            CreatedAt = new DateTime(2025, 9, 6, 10, 23, 27, 701, DateTimeKind.Utc).AddTicks(2207),
                            CurrentBalance = 0m,
                            IsActive = true,
                            IsContraAccount = false,
                            LastModified = new DateTime(2025, 9, 6, 10, 23, 27, 701, DateTimeKind.Utc).AddTicks(2211),
                            Level = 0,
                            Name = "Customer Deposits"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa4"),
                            AccountCode = "3000",
                            AccountType = "",
                            Category = "Equity",
                            CreatedAt = new DateTime(2025, 9, 6, 10, 23, 27, 701, DateTimeKind.Utc).AddTicks(2220),
                            CurrentBalance = 0m,
                            IsActive = true,
                            IsContraAccount = false,
                            LastModified = new DateTime(2025, 9, 6, 10, 23, 27, 701, DateTimeKind.Utc).AddTicks(2220),
                            Level = 0,
                            Name = "Share Capital"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa5"),
                            AccountCode = "4000",
                            AccountType = "",
                            Category = "Income",
                            CreatedAt = new DateTime(2025, 9, 6, 10, 23, 27, 701, DateTimeKind.Utc).AddTicks(2226),
                            CurrentBalance = 0m,
                            IsActive = true,
                            IsContraAccount = false,
                            LastModified = new DateTime(2025, 9, 6, 10, 23, 27, 701, DateTimeKind.Utc).AddTicks(2226),
                            Level = 0,
                            Name = "Interest Income"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa6"),
                            AccountCode = "5000",
                            AccountType = "",
                            Category = "Expense",
                            CreatedAt = new DateTime(2025, 9, 6, 10, 23, 27, 701, DateTimeKind.Utc).AddTicks(2231),
                            CurrentBalance = 0m,
                            IsActive = true,
                            IsContraAccount = false,
                            LastModified = new DateTime(2025, 9, 6, 10, 23, 27, 701, DateTimeKind.Utc).AddTicks(2231),
                            Level = 0,
                            Name = "Operational Expenses"
                        });
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ClosingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CreditTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DebitTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("GLAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PeriodMonth")
                        .HasColumnType("int");

                    b.Property<int>("PeriodYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GLAccountId", "PeriodYear", "PeriodMonth")
                        .IsUnique();

                    b.ToTable("GLBalances", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BatchId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EntryNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("EntryNumber")
                        .IsUnique();

                    b.HasIndex("TransactionDate");

                    b.ToTable("GLEntries", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLEntryLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("GLAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GLEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("GLAccountId");

                    b.HasIndex("GLEntryId");

                    b.ToTable("GLEntryLines", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.LoanApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApplicationDataJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeclineReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TermMonths")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowInstanceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCode");

                    b.HasIndex("Status");

                    b.HasIndex("ClientId", "CreatedAtUtc");

                    b.ToTable("LoanApplications", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.LoanProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseInterestRate")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("InterestRateAnnualPercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxTermMonths")
                        .HasColumnType("int");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MinTermMonths")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TermMonthsDefault")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("LoanProducts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            BaseInterestRate = 0m,
                            Category = "",
                            Code = "SALARY",
                            CreatedAtUtc = new DateTime(2025, 9, 6, 10, 23, 27, 694, DateTimeKind.Utc).AddTicks(8436),
                            Description = "",
                            InterestRateAnnualPercent = 24.00m,
                            IsActive = true,
                            MaxAmount = 0m,
                            MaxTermMonths = 0,
                            MinAmount = 0m,
                            MinTermMonths = 0,
                            Name = "Salary Advance",
                            TermMonthsDefault = 6
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            BaseInterestRate = 0m,
                            Category = "",
                            Code = "PAYROLL",
                            CreatedAtUtc = new DateTime(2025, 9, 6, 10, 23, 27, 694, DateTimeKind.Utc).AddTicks(8436),
                            Description = "",
                            InterestRateAnnualPercent = 28.00m,
                            IsActive = true,
                            MaxAmount = 0m,
                            MaxTermMonths = 0,
                            MinAmount = 0m,
                            MinTermMonths = 0,
                            Name = "Payroll Loan",
                            TermMonthsDefault = 12
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            BaseInterestRate = 0m,
                            Category = "",
                            Code = "SME",
                            CreatedAtUtc = new DateTime(2025, 9, 6, 10, 23, 27, 694, DateTimeKind.Utc).AddTicks(8436),
                            Description = "",
                            InterestRateAnnualPercent = 32.00m,
                            IsActive = true,
                            MaxAmount = 0m,
                            MaxTermMonths = 0,
                            MinAmount = 0m,
                            MinTermMonths = 0,
                            Name = "SME Working Capital",
                            TermMonthsDefault = 18
                        });
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemPermission")
                        .HasColumnType("bit");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ParentPermissionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentPermissionId");

                    b.HasIndex("Resource", "Action")
                        .IsUnique();

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.RiskIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CreditAssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Impact")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreditAssessmentId");

                    b.ToTable("RiskIndicators", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentRoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "role-ceo",
                            CreatedAt = new DateTime(2025, 9, 6, 10, 23, 27, 694, DateTimeKind.Utc).AddTicks(8436),
                            CreatedBy = "system",
                            Description = "Chief Executive Officer",
                            IsActive = true,
                            IsSystemRole = true,
                            Level = 1,
                            Name = "CEO",
                            Type = 3
                        },
                        new
                        {
                            Id = "role-manager",
                            CreatedAt = new DateTime(2025, 9, 6, 10, 23, 27, 694, DateTimeKind.Utc).AddTicks(8436),
                            CreatedBy = "system",
                            Description = "Branch Manager",
                            IsActive = true,
                            IsSystemRole = true,
                            Level = 2,
                            Name = "Manager",
                            Type = 3
                        },
                        new
                        {
                            Id = "role-officer",
                            CreatedAt = new DateTime(2025, 9, 6, 10, 23, 27, 694, DateTimeKind.Utc).AddTicks(8436),
                            CreatedBy = "system",
                            Description = "Loan Officer",
                            IsActive = true,
                            IsSystemRole = true,
                            Level = 3,
                            Name = "LoanOfficer",
                            Type = 1
                        },
                        new
                        {
                            Id = "role-analyst",
                            CreatedAt = new DateTime(2025, 9, 6, 10, 23, 27, 694, DateTimeKind.Utc).AddTicks(8436),
                            CreatedBy = "system",
                            Description = "Credit Analyst",
                            IsActive = true,
                            IsSystemRole = true,
                            Level = 3,
                            Name = "Analyst",
                            Type = 1
                        });
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermissionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Conditions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrantedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("IsActive");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BranchId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user-admin",
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2025, 9, 6, 10, 23, 27, 694, DateTimeKind.Utc).AddTicks(8436),
                            CreatedBy = "system",
                            Email = "admin@intellifin.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            IsActive = true,
                            LastName = "Administrator",
                            LockoutEnabled = true,
                            Metadata = "{}",
                            PasswordHash = "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/RK.PJ/...",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BranchId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("IsActive");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "user-admin",
                            RoleId = "role-ceo",
                            AssignedAt = new DateTime(2025, 9, 6, 10, 23, 27, 694, DateTimeKind.Utc).AddTicks(8436),
                            AssignedBy = "system",
                            IsActive = true,
                            Metadata = "{}"
                        });
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.ValidationRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LoanProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LoanProductId");

                    b.ToTable("ValidationRules", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.ApplicationField", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.LoanProduct", "LoanProduct")
                        .WithMany("RequiredFields")
                        .HasForeignKey("LoanProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.CreditAssessment", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.LoanApplication", "LoanApplication")
                        .WithMany("CreditAssessments")
                        .HasForeignKey("LoanApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LoanApplication");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.CreditFactor", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.CreditAssessment", "CreditAssessment")
                        .WithMany("CreditFactors")
                        .HasForeignKey("CreditAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditAssessment");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.DocumentVerification", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLAccount", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.GLAccount", "ParentAccount")
                        .WithMany("SubAccounts")
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLBalance", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.GLAccount", "GLAccount")
                        .WithMany("GLBalances")
                        .HasForeignKey("GLAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GLAccount");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLEntryLine", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.GLAccount", "GLAccount")
                        .WithMany("GLEntryLines")
                        .HasForeignKey("GLAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.GLEntry", "GLEntry")
                        .WithMany("Lines")
                        .HasForeignKey("GLEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GLAccount");

                    b.Navigation("GLEntry");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.LoanApplication", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Client", "Client")
                        .WithMany("LoanApplications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.LoanProduct", "Product")
                        .WithMany("LoanApplications")
                        .HasForeignKey("ProductCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Permission", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Permission", "ParentPermission")
                        .WithMany("ChildPermissions")
                        .HasForeignKey("ParentPermissionId");

                    b.Navigation("ParentPermission");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.RiskIndicator", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.CreditAssessment", "CreditAssessment")
                        .WithMany("RiskIndicators")
                        .HasForeignKey("CreditAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditAssessment");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Role", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Role", "ParentRole")
                        .WithMany("ChildRoles")
                        .HasForeignKey("ParentRoleId");

                    b.Navigation("ParentRole");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.RolePermission", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.UserRole", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.ValidationRule", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.LoanProduct", "LoanProduct")
                        .WithMany("ValidationRules")
                        .HasForeignKey("LoanProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Client", b =>
                {
                    b.Navigation("LoanApplications");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.CreditAssessment", b =>
                {
                    b.Navigation("CreditFactors");

                    b.Navigation("RiskIndicators");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLAccount", b =>
                {
                    b.Navigation("GLBalances");

                    b.Navigation("GLEntryLines");

                    b.Navigation("SubAccounts");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLEntry", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.LoanApplication", b =>
                {
                    b.Navigation("CreditAssessments");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.LoanProduct", b =>
                {
                    b.Navigation("LoanApplications");

                    b.Navigation("RequiredFields");

                    b.Navigation("ValidationRules");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Permission", b =>
                {
                    b.Navigation("ChildPermissions");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Role", b =>
                {
                    b.Navigation("ChildRoles");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
