// <auto-generated />
using System;
using IntelliFin.Shared.DomainModels.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IntelliFin.Shared.DomainModels.Migrations
{
    [DbContext(typeof(LmsDbContext))]
    [Migration("20251015120438_IAMEnhancement_SchemaExtensions")]
    partial class IAMEnhancement_SchemaExtensions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.ApplicationField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("HelpText")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("LoanProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OptionsJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ValidationPattern")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("LoanProductId");

                    b.ToTable("ApplicationFields", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.AuditEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("EventId");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Actor")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ActorId");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Details");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Entity");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("OccurredAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Timestamp")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Actor")
                        .HasDatabaseName("IX_AuditEvents_ActorId");

                    b.HasIndex("OccurredAtUtc")
                        .HasDatabaseName("IX_AuditEvents_Timestamp");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_AuditEvents_TenantId")
                        .HasFilter("[TenantId] IS NOT NULL");

                    b.ToTable("AuditEvents", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.HasIndex("NationalId")
                        .IsUnique();

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.CreditAssessment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssessedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("CreditScore")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("DebtToIncomeRatio")
                        .HasColumnType("decimal(5,4)");

                    b.Property<bool>("HasCreditBureauData")
                        .HasColumnType("bit");

                    b.Property<Guid>("LoanApplicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PaymentCapacity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("RiskGrade")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ScoreExplanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssessedAt");

                    b.HasIndex("LoanApplicationId");

                    b.HasIndex("RiskGrade");

                    b.ToTable("CreditAssessments", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.CreditFactor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreditAssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Impact")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(5,4)");

                    b.HasKey("Id");

                    b.HasIndex("CreditAssessmentId");

                    b.ToTable("CreditFactors", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.DocumentVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataMismatches")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentImagePath")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasDataMismatches")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManuallyEnteredData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OcrConfidenceScore")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("OcrExtractedData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OcrProvider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("VerificationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerificationDecisionReason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("VerificationNotes")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("VerifiedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("IsVerified");

                    b.HasIndex("VerificationDate");

                    b.HasIndex("DocumentType", "DocumentNumber");

                    b.ToTable("DocumentVerifications", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.ErrorLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ErrorLogs");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.EventProcessingStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ErrorDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset>("ProcessedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProcessingResult")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("EventType");

                    b.HasIndex("ProcessedAt");

                    b.HasIndex("ProcessingResult");

                    b.ToTable("EventProcessingStatus", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.EventRoutingLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrelationId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Destinations")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RouteTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RuleId")
                        .HasColumnType("int");

                    b.Property<string>("SourceService")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.HasIndex("EventType");

                    b.HasIndex("RouteTimestamp");

                    b.HasIndex("RuleId");

                    b.HasIndex("SourceService", "RouteTimestamp");

                    b.ToTable("EventRoutingLogs", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.EventRoutingRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Conditions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ConsumerType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerType");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Priority");

                    b.HasIndex("EventType", "IsActive");

                    b.ToTable("EventRoutingRules", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsContraAccount")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ParentAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountCode")
                        .IsUnique();

                    b.HasIndex("Category");

                    b.HasIndex("ParentAccountId");

                    b.ToTable("GLAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa1"),
                            AccountCode = "1000",
                            AccountType = "",
                            Category = "Asset",
                            CreatedAt = new DateTime(2025, 10, 15, 14, 19, 27, 127, DateTimeKind.Utc).AddTicks(2700),
                            CurrentBalance = 0m,
                            IsActive = true,
                            IsContraAccount = false,
                            LastModified = new DateTime(2025, 10, 15, 14, 19, 27, 127, DateTimeKind.Utc).AddTicks(2704),
                            Level = 0,
                            Name = "Cash and Bank"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa2"),
                            AccountCode = "1100",
                            AccountType = "",
                            Category = "Asset",
                            CreatedAt = new DateTime(2025, 10, 15, 14, 19, 27, 127, DateTimeKind.Utc).AddTicks(5501),
                            CurrentBalance = 0m,
                            IsActive = true,
                            IsContraAccount = false,
                            LastModified = new DateTime(2025, 10, 15, 14, 19, 27, 127, DateTimeKind.Utc).AddTicks(5503),
                            Level = 0,
                            Name = "Loans Receivable"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa3"),
                            AccountCode = "2000",
                            AccountType = "",
                            Category = "Liability",
                            CreatedAt = new DateTime(2025, 10, 15, 14, 19, 27, 127, DateTimeKind.Utc).AddTicks(5515),
                            CurrentBalance = 0m,
                            IsActive = true,
                            IsContraAccount = false,
                            LastModified = new DateTime(2025, 10, 15, 14, 19, 27, 127, DateTimeKind.Utc).AddTicks(5516),
                            Level = 0,
                            Name = "Customer Deposits"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa4"),
                            AccountCode = "3000",
                            AccountType = "",
                            Category = "Equity",
                            CreatedAt = new DateTime(2025, 10, 15, 14, 19, 27, 127, DateTimeKind.Utc).AddTicks(5521),
                            CurrentBalance = 0m,
                            IsActive = true,
                            IsContraAccount = false,
                            LastModified = new DateTime(2025, 10, 15, 14, 19, 27, 127, DateTimeKind.Utc).AddTicks(5522),
                            Level = 0,
                            Name = "Share Capital"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa5"),
                            AccountCode = "4000",
                            AccountType = "",
                            Category = "Income",
                            CreatedAt = new DateTime(2025, 10, 15, 14, 19, 27, 127, DateTimeKind.Utc).AddTicks(5561),
                            CurrentBalance = 0m,
                            IsActive = true,
                            IsContraAccount = false,
                            LastModified = new DateTime(2025, 10, 15, 14, 19, 27, 127, DateTimeKind.Utc).AddTicks(5562),
                            Level = 0,
                            Name = "Interest Income"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaa6"),
                            AccountCode = "5000",
                            AccountType = "",
                            Category = "Expense",
                            CreatedAt = new DateTime(2025, 10, 15, 14, 19, 27, 127, DateTimeKind.Utc).AddTicks(5566),
                            CurrentBalance = 0m,
                            IsActive = true,
                            IsContraAccount = false,
                            LastModified = new DateTime(2025, 10, 15, 14, 19, 27, 127, DateTimeKind.Utc).AddTicks(5567),
                            Level = 0,
                            Name = "Operational Expenses"
                        });
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLBalance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ClosingBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CreditTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DebitTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("GLAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PeriodMonth")
                        .HasColumnType("int");

                    b.Property<int>("PeriodYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GLAccountId", "PeriodYear", "PeriodMonth")
                        .IsUnique();

                    b.ToTable("GLBalances", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BatchId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EntryNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("EntryNumber")
                        .IsUnique();

                    b.HasIndex("TransactionDate");

                    b.ToTable("GLEntries", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLEntryLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("GLAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GLEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("GLAccountId");

                    b.HasIndex("GLEntryId");

                    b.ToTable("GLEntryLines", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.HealthCheckLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Component")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HealthCheckLogs");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.LoanApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ApplicationDataJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeclineReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("RequestedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TermMonths")
                        .HasColumnType("int");

                    b.Property<string>("WorkflowInstanceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductCode");

                    b.HasIndex("Status");

                    b.HasIndex("ClientId", "CreatedAtUtc");

                    b.ToTable("LoanApplications", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.LoanProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BaseInterestRate")
                        .HasColumnType("decimal(5,4)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("InterestRateAnnualPercent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxTermMonths")
                        .HasColumnType("int");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MinTermMonths")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TermMonthsDefault")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("LoanProducts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            BaseInterestRate = 0m,
                            Category = "",
                            Code = "SALARY",
                            CreatedAtUtc = new DateTime(2025, 10, 15, 14, 19, 27, 124, DateTimeKind.Utc).AddTicks(8653),
                            Description = "",
                            InterestRateAnnualPercent = 24.00m,
                            IsActive = true,
                            MaxAmount = 0m,
                            MaxTermMonths = 0,
                            MinAmount = 0m,
                            MinTermMonths = 0,
                            Name = "Salary Advance",
                            TermMonthsDefault = 6
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            BaseInterestRate = 0m,
                            Category = "",
                            Code = "PAYROLL",
                            CreatedAtUtc = new DateTime(2025, 10, 15, 14, 19, 27, 124, DateTimeKind.Utc).AddTicks(8653),
                            Description = "",
                            InterestRateAnnualPercent = 28.00m,
                            IsActive = true,
                            MaxAmount = 0m,
                            MaxTermMonths = 0,
                            MinAmount = 0m,
                            MinTermMonths = 0,
                            Name = "Payroll Loan",
                            TermMonthsDefault = 12
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            BaseInterestRate = 0m,
                            Category = "",
                            Code = "SME",
                            CreatedAtUtc = new DateTime(2025, 10, 15, 14, 19, 27, 124, DateTimeKind.Utc).AddTicks(8653),
                            Description = "",
                            InterestRateAnnualPercent = 32.00m,
                            IsActive = true,
                            MaxAmount = 0m,
                            MaxTermMonths = 0,
                            MinAmount = 0m,
                            MinTermMonths = 0,
                            Name = "SME Working Capital",
                            TermMonthsDefault = 18
                        });
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.NotificationLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTimeOffset?>("DeliveredAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("GatewayResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxRetries")
                        .HasColumnType("int");

                    b.Property<string>("PersonalizationData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("SentAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("EventId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("Status");

                    b.HasIndex("TemplateId");

                    b.HasIndex("BranchId", "CreatedAt");

                    b.HasIndex("RecipientId", "CreatedAt");

                    b.ToTable("NotificationLogs", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.NotificationTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Channel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PersonalizationTokens")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Name", "Version")
                        .IsUnique();

                    b.HasIndex("Category", "Channel", "IsActive");

                    b.ToTable("NotificationTemplates", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.PerformanceLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("DurationMs")
                        .HasColumnType("float");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PerformanceLogs");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Permission", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemPermission")
                        .HasColumnType("bit");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ParentPermissionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentPermissionId");

                    b.HasIndex("Resource", "Action")
                        .IsUnique();

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.RiskIndicator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CreditAssessmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Impact")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreditAssessmentId");

                    b.ToTable("RiskIndicators", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemRole")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentRoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentRoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "role-system-admin",
                            CreatedAt = new DateTime(2025, 10, 15, 14, 19, 27, 124, DateTimeKind.Utc).AddTicks(8653),
                            CreatedBy = "system",
                            Description = "Global administrator with full platform access",
                            IsActive = true,
                            IsSystemRole = true,
                            Level = 1,
                            Name = "System Administrator",
                            Type = 0
                        },
                        new
                        {
                            Id = "role-finance-manager",
                            CreatedAt = new DateTime(2025, 10, 15, 14, 19, 27, 124, DateTimeKind.Utc).AddTicks(8653),
                            CreatedBy = "system",
                            Description = "Oversees finance operations and financial controls",
                            IsActive = true,
                            IsSystemRole = true,
                            Level = 2,
                            Name = "Finance Manager",
                            Type = 3
                        },
                        new
                        {
                            Id = "role-compliance-officer",
                            CreatedAt = new DateTime(2025, 10, 15, 14, 19, 27, 124, DateTimeKind.Utc).AddTicks(8653),
                            CreatedBy = "system",
                            Description = "Manages regulatory compliance and audit readiness",
                            IsActive = true,
                            IsSystemRole = true,
                            Level = 2,
                            Name = "Compliance Officer",
                            Type = 2
                        },
                        new
                        {
                            Id = "role-underwriter",
                            CreatedAt = new DateTime(2025, 10, 15, 14, 19, 27, 124, DateTimeKind.Utc).AddTicks(8653),
                            CreatedBy = "system",
                            Description = "Performs credit underwriting and risk assessments",
                            IsActive = true,
                            IsSystemRole = true,
                            Level = 3,
                            Name = "Underwriter",
                            Type = 2
                        },
                        new
                        {
                            Id = "role-loan-officer",
                            CreatedAt = new DateTime(2025, 10, 15, 14, 19, 27, 124, DateTimeKind.Utc).AddTicks(8653),
                            CreatedBy = "system",
                            Description = "Originates and manages loan applications",
                            IsActive = true,
                            IsSystemRole = true,
                            Level = 3,
                            Name = "Loan Officer",
                            Type = 2
                        },
                        new
                        {
                            Id = "role-collections-officer",
                            CreatedAt = new DateTime(2025, 10, 15, 14, 19, 27, 124, DateTimeKind.Utc).AddTicks(8653),
                            CreatedBy = "system",
                            Description = "Handles collections activities and payment follow-up",
                            IsActive = true,
                            IsSystemRole = true,
                            Level = 3,
                            Name = "Collections Officer",
                            Type = 2
                        });
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermissionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Conditions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrantedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("IsActive");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.ServiceAccount", b =>
                {
                    b.Property<Guid>("ServiceAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ServiceAccountId");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("ServiceAccounts", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.ServiceCredential", b =>
                {
                    b.Property<Guid>("CredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecretHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ServiceAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CredentialId");

                    b.HasIndex("ServiceAccountId");

                    b.ToTable("ServiceCredentials", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.SoDRule", b =>
                {
                    b.Property<Guid>("RuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConflictingPermissions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Enforcement")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("strict");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RuleId");

                    b.HasIndex("RuleName")
                        .IsUnique();

                    b.ToTable("SoDRules", (string)null);

                    b.HasData(
                        new
                        {
                            RuleId = new Guid("20000000-0000-0000-0000-000000000001"),
                            ConflictingPermissions = "[\"loans:create\", \"loans:approve\"]",
                            Description = "Prevent a single user from originating and approving the same loan",
                            Enforcement = "strict",
                            IsActive = true,
                            RuleName = "sod-loan-approval"
                        },
                        new
                        {
                            RuleId = new Guid("20000000-0000-0000-0000-000000000002"),
                            ConflictingPermissions = "[\"gl:post\", \"gl:reverse\"]",
                            Description = "Prevent a single user from posting and reversing the same GL entries",
                            Enforcement = "strict",
                            IsActive = true,
                            RuleName = "sod-gl-posting"
                        },
                        new
                        {
                            RuleId = new Guid("20000000-0000-0000-0000-000000000003"),
                            ConflictingPermissions = "[\"clients:create\", \"compliance:manage\"]",
                            Description = "Block when client onboarding and compliance approval are handled by the same user",
                            Enforcement = "strict",
                            IsActive = true,
                            RuleName = "sod-client-approval"
                        },
                        new
                        {
                            RuleId = new Guid("20000000-0000-0000-0000-000000000004"),
                            ConflictingPermissions = "[\"payments:record\", \"payments:reverse\"]",
                            Description = "Warn if the same user records and reverses customer payments during reconciliation",
                            Enforcement = "warning",
                            IsActive = true,
                            RuleName = "sod-payment-reconciliation"
                        });
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Tenant", b =>
                {
                    b.Property<Guid>("TenantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Settings")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TenantId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.TenantBranch", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TenantId", "BranchId");

                    b.ToTable("TenantBranches", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.TenantUser", b =>
                {
                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Role")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TenantId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TenantUsers", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.TokenRevocation", b =>
                {
                    b.Property<Guid>("RevocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedBy")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TokenId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RevocationId");

                    b.HasIndex("ExpiresAt");

                    b.HasIndex("TokenId")
                        .IsUnique();

                    b.ToTable("TokenRevocations", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BranchId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchRegion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IsActive");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user-admin",
                            AccessFailedCount = 0,
                            CreatedAt = new DateTime(2025, 10, 15, 14, 19, 27, 124, DateTimeKind.Utc).AddTicks(8653),
                            CreatedBy = "system",
                            Email = "admin@intellifin.com",
                            EmailConfirmed = true,
                            FirstName = "System",
                            IsActive = true,
                            LastName = "Administrator",
                            LockoutEnabled = true,
                            Metadata = "{}",
                            PasswordHash = "$2a$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj/RK.PJ/...",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("AssignedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BranchId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("IsActive");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "user-admin",
                            RoleId = "role-system-admin",
                            AssignedAt = new DateTime(2025, 10, 15, 14, 19, 27, 124, DateTimeKind.Utc).AddTicks(8653),
                            AssignedBy = "system",
                            IsActive = true,
                            Metadata = "{}"
                        });
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.ValidationRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LoanProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LoanProductId");

                    b.ToTable("ValidationRules", (string)null);
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.ApplicationField", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.LoanProduct", "LoanProduct")
                        .WithMany("RequiredFields")
                        .HasForeignKey("LoanProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.CreditAssessment", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.LoanApplication", "LoanApplication")
                        .WithMany("CreditAssessments")
                        .HasForeignKey("LoanApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LoanApplication");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.CreditFactor", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.CreditAssessment", "CreditAssessment")
                        .WithMany("CreditFactors")
                        .HasForeignKey("CreditAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditAssessment");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.DocumentVerification", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.EventRoutingLog", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.EventRoutingRule", "Rule")
                        .WithMany("RoutingLogs")
                        .HasForeignKey("RuleId");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLAccount", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.GLAccount", "ParentAccount")
                        .WithMany("SubAccounts")
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLBalance", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.GLAccount", "GLAccount")
                        .WithMany("GLBalances")
                        .HasForeignKey("GLAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GLAccount");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLEntryLine", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.GLAccount", "GLAccount")
                        .WithMany("GLEntryLines")
                        .HasForeignKey("GLAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.GLEntry", "GLEntry")
                        .WithMany("Lines")
                        .HasForeignKey("GLEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GLAccount");

                    b.Navigation("GLEntry");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.LoanApplication", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Client", "Client")
                        .WithMany("LoanApplications")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.LoanProduct", "Product")
                        .WithMany("LoanApplications")
                        .HasForeignKey("ProductCode")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.NotificationLog", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.NotificationTemplate", "Template")
                        .WithMany("NotificationLogs")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Template");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Permission", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Permission", "ParentPermission")
                        .WithMany("ChildPermissions")
                        .HasForeignKey("ParentPermissionId");

                    b.Navigation("ParentPermission");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.RiskIndicator", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.CreditAssessment", "CreditAssessment")
                        .WithMany("RiskIndicators")
                        .HasForeignKey("CreditAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreditAssessment");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Role", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Role", "ParentRole")
                        .WithMany("ChildRoles")
                        .HasForeignKey("ParentRoleId");

                    b.Navigation("ParentRole");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.RolePermission", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.ServiceCredential", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.ServiceAccount", "ServiceAccount")
                        .WithMany("Credentials")
                        .HasForeignKey("ServiceAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceAccount");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.TenantBranch", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Tenant", "Tenant")
                        .WithMany("TenantBranches")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.TenantUser", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Tenant", "Tenant")
                        .WithMany("TenantUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.User", "User")
                        .WithMany("TenantUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.UserRole", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.ValidationRule", b =>
                {
                    b.HasOne("IntelliFin.Shared.DomainModels.Entities.LoanProduct", "LoanProduct")
                        .WithMany("ValidationRules")
                        .HasForeignKey("LoanProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoanProduct");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Client", b =>
                {
                    b.Navigation("LoanApplications");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.CreditAssessment", b =>
                {
                    b.Navigation("CreditFactors");

                    b.Navigation("RiskIndicators");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.EventRoutingRule", b =>
                {
                    b.Navigation("RoutingLogs");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLAccount", b =>
                {
                    b.Navigation("GLBalances");

                    b.Navigation("GLEntryLines");

                    b.Navigation("SubAccounts");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.GLEntry", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.LoanApplication", b =>
                {
                    b.Navigation("CreditAssessments");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.LoanProduct", b =>
                {
                    b.Navigation("LoanApplications");

                    b.Navigation("RequiredFields");

                    b.Navigation("ValidationRules");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.NotificationTemplate", b =>
                {
                    b.Navigation("NotificationLogs");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Permission", b =>
                {
                    b.Navigation("ChildPermissions");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Role", b =>
                {
                    b.Navigation("ChildRoles");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.ServiceAccount", b =>
                {
                    b.Navigation("Credentials");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.Tenant", b =>
                {
                    b.Navigation("TenantBranches");

                    b.Navigation("TenantUsers");
                });

            modelBuilder.Entity("IntelliFin.Shared.DomainModels.Entities.User", b =>
                {
                    b.Navigation("TenantUsers");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
