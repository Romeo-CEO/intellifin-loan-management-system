namespace IntelliFin.Shared.Infrastructure.Messaging.Contracts;

public interface IBusinessEvent
{
    Guid EventId { get; }
    DateTime EventTimestamp { get; }
    string EventType { get; }
    string SourceService { get; }
}

public record LoanApplicationCreated(
    Guid ApplicationId,
    Guid ClientId,
    decimal Amount,
    int TermMonths,
    string ProductCode,
    DateTime CreatedAtUtc
) : IBusinessEvent
{
    /// <summary>
    /// The unique event identifier generated by the originating service.
    /// Defaults to a deterministic identifier when not supplied to preserve idempotency support.
    /// </summary>
    public Guid EventId { get; init; } = Guid.NewGuid();

    /// <summary>
    /// Optional amount requested by the customer at the time of submission.
    /// Falls back to <see cref="Amount"/> when a specific requested amount is not provided by the producer.
    /// </summary>
    public decimal RequestedAmount { get; init; } = Amount;

    /// <summary>
    /// Friendly product type description used for customer facing notifications.
    /// Defaults to the product code to maintain backwards compatibility with existing publishers.
    /// </summary>
    public string ProductType { get; init; } = ProductCode;

    /// <summary>
    /// Branch that originated the application. A value of 0 indicates that the originating service
    /// did not supply a branch context.
    /// </summary>
    public int BranchId { get; init; }

    /// <summary>
    /// Customer display name made available to downstream notification services for personalization.
    /// </summary>
    public string CustomerName { get; init; } = string.Empty;

    /// <summary>
    /// Customer mobile number used for SMS delivery. When not available the notification
    /// pipeline will automatically fall back to queued delivery to avoid failures.
    /// </summary>
    public string CustomerPhone { get; init; } = string.Empty;

    /// <summary>
    /// Customer email address. Although not used by the current story, the value is captured
    /// so future enhancements can send acknowledgement emails without modifying the event contract again.
    /// </summary>
    public string CustomerEmail { get; init; } = string.Empty;

    public DateTime EventTimestamp => CreatedAtUtc;
    public string EventType => "LoanApplicationCreated";
    public string SourceService => "LoanOriginationService";
}
